.TH "stack.h" 3 "Version 0.1.0" "shana" \" -*- nroff -*-
.ad l
.nh
.SH NAME
stack.h
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBstack_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBstack_init\fP (\fBstack_t\fP *s, size_t element_size)"
.br
.RI "Initializes a new generic stack\&. "
.ti -1c
.RI "void \fBstack_free\fP (\fBstack_t\fP *s)"
.br
.RI "Frees the memory allocated for the stack during initialization\&. "
.ti -1c
.RI "bool \fBstack_push\fP (\fBstack_t\fP *s, const void *element)"
.br
.RI "Adds an element to the top of the stack\&. "
.ti -1c
.RI "bool \fBstack_pop\fP (\fBstack_t\fP *s)"
.br
.RI "Removes the top element from the stack\&. "
.ti -1c
.RI "void * \fBstack_top\fP (\fBstack_t\fP *s)"
.br
.RI "Accesses the top element of the stack\&. "
.ti -1c
.RI "bool \fBstack_is_empty\fP (const \fBstack_t\fP *s)"
.br
.RI "Checks if the stack is empty\&. "
.ti -1c
.RI "size_t \fBstack_size\fP (const \fBstack_t\fP *s)"
.br
.RI "Checks the current number of elements in the stack\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "void stack_free (\fBstack_t\fP * s)"

.PP
Frees the memory allocated for the stack during initialization\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Pointer to the initialized \fBstack_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
This function does not return a value\&. 
.RE
.PP

.SS "void stack_init (\fBstack_t\fP * s, size_t element_size)"

.PP
Initializes a new generic stack\&. Allocates initial memory for the stack and initializes its members\&.

.PP
\fBParameters\fP
.RS 4
\fIs\fP Pointer to the \fBstack_t\fP structure to be initialized\&. 
.br
\fIelement_size\fP The size in bytes of a single element the stack will contain, e\&.g\&., sizeof(int)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
This function does not return a value\&. 
.RE
.PP

.SS "bool stack_is_empty (const \fBstack_t\fP * s)"

.PP
Checks if the stack is empty\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Pointer to the initialized \fBstack_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns true if the stack is empty, false otherwise\&. 
.RE
.PP

.SS "bool stack_pop (\fBstack_t\fP * s)"

.PP
Removes the top element from the stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Pointer to the initialized \fBstack_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns true if an element was successfully removed, false if the stack was empty\&. 
.RE
.PP

.SS "bool stack_push (\fBstack_t\fP * s, const void * element)"

.PP
Adds an element to the top of the stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Pointer to the initialized \fBstack_t\fP structure\&. 
.br
\fIelement\fP Constant void pointer to a value to be added to the stack\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns true if the operation was successful, false otherwise\&. 
.RE
.PP

.SS "size_t stack_size (const \fBstack_t\fP * s)"

.PP
Checks the current number of elements in the stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Pointer to the initialized \fBstack_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns the current number of elements in the stack\&. 
.RE
.PP

.SS "void * stack_top (\fBstack_t\fP * s)"

.PP
Accesses the top element of the stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Pointer to the initialized \fBstack_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a void pointer to the top element of the stack, or NULL if the stack is empty\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for shana from the source code\&.
