.TH "vector.h" 3 "Version 0.1.0" "shana" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vector.h
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBvector_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBvector_init\fP (\fBvector_t\fP *vec, size_t element_size)"
.br
.RI "Initializes a new vector\&. "
.ti -1c
.RI "void \fBvector_free\fP (\fBvector_t\fP *vec)"
.br
.RI "Frees the memory allocated during vector initialization\&. "
.ti -1c
.RI "bool \fBvector_push_back\fP (\fBvector_t\fP *vec, const void *element)"
.br
.RI "Inserts an element at the end of the vector\&. "
.ti -1c
.RI "void * \fBvector_at\fP (\fBvector_t\fP *vec, size_t index)"
.br
.RI "Retrieves an element from the vector at the specified index\&. "
.ti -1c
.RI "void * \fBvector_front\fP (\fBvector_t\fP *vec)"
.br
.RI "Retrieves the very first element of the vector\&. "
.ti -1c
.RI "void * \fBvector_back\fP (\fBvector_t\fP *vec)"
.br
.RI "Retrieves the last element of the vector\&. "
.ti -1c
.RI "size_t \fBvector_size\fP (const \fBvector_t\fP *vec)"
.br
.RI "Retrieves the number of elements stored in the vector\&. "
.ti -1c
.RI "size_t \fBvector_capacity\fP (const \fBvector_t\fP *vec)"
.br
.RI "Retrieves the allocated capacity\&. "
.ti -1c
.RI "bool \fBvector_is_empty\fP (const \fBvector_t\fP *vec)"
.br
.RI "Checks if the vector is empty\&. "
.ti -1c
.RI "bool \fBvector_pop_back\fP (\fBvector_t\fP *vec)"
.br
.RI "Removes the last element from the vector\&. "
.ti -1c
.RI "bool \fBvector_pop_front\fP (\fBvector_t\fP *vec)"
.br
.RI "Removes the first element from the vector\&. "
.ti -1c
.RI "bool \fBvector_pop_at\fP (\fBvector_t\fP *vec, size_t index)"
.br
.RI "Removes an element from the vector at a specified index\&. "
.ti -1c
.RI "bool \fBvector_push_front\fP (\fBvector_t\fP *vec, const void *element)"
.br
.RI "Adds an element to the very first index of the vector\&. "
.ti -1c
.RI "bool \fBvector_push_at\fP (\fBvector_t\fP *vec, size_t index, const void *element)"
.br
.RI "Adds an element to the vector at the specified index\&. "
.ti -1c
.RI "bool \fBvector_reverse\fP (\fBvector_t\fP *vec)"
.br
.RI "Reverse the elements of the vector\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "void * vector_at (\fBvector_t\fP * vec, size_t index)"

.PP
Retrieves an element from the vector at the specified index\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.br
\fIindex\fP Index de l'élément à récupéré\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a void pointer to the element stored at the specified index\&. 
.RE
.PP

.SS "void * vector_back (\fBvector_t\fP * vec)"

.PP
Retrieves the last element of the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a void pointer to the very last element of the vector\&. 
.RE
.PP

.SS "size_t vector_capacity (const \fBvector_t\fP * vec)"

.PP
Retrieves the allocated capacity\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns the memory capacity allocated to the vector\&. 
.RE
.PP

.SS "void vector_free (\fBvector_t\fP * vec)"

.PP
Frees the memory allocated during vector initialization\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
This function does not return a value\&. 
.RE
.PP

.SS "void * vector_front (\fBvector_t\fP * vec)"

.PP
Retrieves the very first element of the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a void pointer to the very first element of the vector\&. 
.RE
.PP

.SS "void vector_init (\fBvector_t\fP * vec, size_t element_size)"

.PP
Initializes a new vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointeur vers la structure \fBvector_t\fP à initialiser\&. 
.br
\fIelement_size\fP Size of the element type to store in the vector\&. 
.RE
.PP
\fBReturns\fP
.RS 4
This function does not return a value\&. 
.RE
.PP

.SS "bool vector_is_empty (const \fBvector_t\fP * vec)"

.PP
Checks if the vector is empty\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns true if the vector is empty\&. 
.RE
.PP

.SS "bool vector_pop_at (\fBvector_t\fP * vec, size_t index)"

.PP
Removes an element from the vector at a specified index\&. This function removes the element located at the given index within the vector\&. All elements following the removed index are shifted one position towards the beginning of the vector\&.

.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.br
\fIindex\fP Index of the element to be removed\&.
.RE
.PP
\fBReturns\fP
.RS 4
Returns \fRtrue\fP if the operation was successful, \fRfalse\fP if the vector is NULL, uninitialized, empty, or if the index is out of bounds\&. 
.RE
.PP

.SS "bool vector_pop_back (\fBvector_t\fP * vec)"

.PP
Removes the last element from the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns true if everything went smoothly\&. 
.RE
.PP

.SS "bool vector_pop_front (\fBvector_t\fP * vec)"

.PP
Removes the first element from the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns true if everything went smoothly\&. 
.RE
.PP

.SS "bool vector_push_at (\fBvector_t\fP * vec, size_t index, const void * element)"

.PP
Adds an element to the vector at the specified index\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.br
\fIindex\fP Index where the new element should be inserted\&. 
.br
\fIelement\fP Constant void pointer to the element to be added\&.
.RE
.PP
\fBReturns\fP
.RS 4
Returns \fRtrue\fP if the operation was successful, \fRfalse\fP if the vector is NULL, uninitialized, or if the index is out of bounds\&. 
.RE
.PP

.SS "bool vector_push_back (\fBvector_t\fP * vec, const void * element)"

.PP
Inserts an element at the end of the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.br
\fIelement\fP Constant void pointer to the element to insert\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns true if everything went smoothly\&. 
.RE
.PP

.SS "bool vector_push_front (\fBvector_t\fP * vec, const void * element)"

.PP
Adds an element to the very first index of the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.br
\fIelement\fP Constant void pointer to the element to be added\&.
.RE
.PP
\fBReturns\fP
.RS 4
Returns \fRtrue\fP if the operation was successful, \fRfalse\fP if the vector is NULL or uninitialized\&. 
.RE
.PP

.SS "bool vector_reverse (\fBvector_t\fP * vec)"

.PP
Reverse the elements of the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&.
.RE
.PP
\fBReturns\fP
.RS 4
Returns \fRtrue\fP if the operation was successful, \fRfalse\fP is the vector is NULL or uninitialized\&. 
.RE
.PP

.SS "size_t vector_size (const \fBvector_t\fP * vec)"

.PP
Retrieves the number of elements stored in the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvec\fP Pointer to the initialized \fBvector_t\fP structure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns the number of elements stored in the vector\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for shana from the source code\&.
